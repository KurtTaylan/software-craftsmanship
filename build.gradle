subprojects {

    ext.junit4Version = '4.12'
    ext.junitVintageVersion = '4.12.0'
    ext.junitPlatformVersion = '1.0.0'
    ext.junitJupiterVersion = '5.0.0'


    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'org.junit.platform.gradle.plugin'
    group = 'com.craftsmanship'
    version = '1.0-SNAPSHOT'


    repositories {
        mavenCentral()
    }


    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0'
        }
    }


    compileTestJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
        options.compilerArgs += '-ae'
    }


    // Example junitplatform config
    junitPlatform {
        // platformVersion '1.0.0'
        filters {
            engines {
                // include 'junit-jupiter', 'junit-vintage'
                // exclude 'custom-engine'
            }
            tags {
                // include 'fast'
                exclude 'slow'
            }
            // includeClassNamePattern '.*Test'
        }
        // configurationParameter 'junit.jupiter.conditions.deactivate', '*'
        // enableStandardTestTask true
        // reportsDir file('build/test-results/junit-platform') // this is the default
        logManager 'org.apache.logging.log4j.jul.LogManager'
    }


    dependencies {
        // Mockito library
        compile("org.mockito:mockito-core:2.+")

        // JUnit Jupiter API and TestEngine implementation
        compile("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
        testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")

        // If you also want to support JUnit 3 and JUnit 4 tests
        testCompile("junit:junit:${junit4Version}")
        testRuntime("org.junit.vintage:junit-vintage-engine:${junitVintageVersion}")

        testRuntime("org.apache.logging.log4j:log4j-core:${log4jVersion}")
        testRuntime("org.apache.logging.log4j:log4j-jul:${log4jVersion}")

        // Only needed to run tests in an (IntelliJ) IDE(A) that bundles an older version
        testRuntime("org.junit.platform:junit-platform-launcher:${junitPlatformVersion}")
    }


    task wrapper(type: Wrapper) {
        description = 'Generates gradlew[.bat] scripts'
        gradleVersion = '4.1.0'
    }

}